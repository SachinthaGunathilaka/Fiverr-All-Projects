# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rcOeWV5HYwAjwTOixtIDZb4GyN1ufAaa
"""

def selectionSort(array):
    size = len(array)
    for ind in range(size):
        min_index = ind
 
        for j in range(ind + 1, size):
            if array[j] < array[min_index]:
                min_index = j
        (array[ind], array[min_index]) = (array[min_index], array[ind])

def mergeSort(arr):
    size = len(arr)
    if size > 1:
        mid = len(arr)//2
        L = arr[:mid]
        R = arr[mid:]
 
        mergeSort(L)
 
        mergeSort(R)
 
        i = j = k = 0
 
        while i < len(L) and j < len(R):
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
 
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
 
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

def radixSortHelper(arr, exp1):
 
    n = len(arr)
 
    output = [0] * (n)
 
    count = [0] * (10)
 
    for i in range(0, n):
        index = arr[i] // exp1
        count[index % 10] += 1
 
    for i in range(1, 10):
        count[i] += count[i - 1]
 
    i = n - 1
    while i >= 0:
        index = arr[i] // exp1
        output[count[index % 10] - 1] = arr[i]
        count[index % 10] -= 1
        i -= 1
 
    i = 0
    for i in range(0, len(arr)):
        arr[i] = output[i]

def radixSort(arr):
 
    max1 = max(arr)
    exp = 1
    while max1 / exp >= 1:
        radixSortHelper(arr, exp)
        exp *= 10

arr = [-2, 45, 0, 11, -9,88,-97,-202,747]
selectionSort(arr)
print(arr)

arr = [-2, 45, 0, 11, -9,88,-97,-202,747]
mergeSort(arr)
print(arr)

arr = [-2, 45, 0, 11, -9,88,-97,-202,747]
radixSort(arr)
print(arr)

"""#Testing"""

import random
import time

def displayExecutionTimes(n):
    data = random.sample(range(1, n*10), n)
    temp_data = data.copy()

    start_time = time.time()
    selectionSort(temp_data)
    print("Selection Sort : %s seconds" % (time.time() - start_time))

    temp_data = data.copy()
    start_time = time.time()
    mergeSort(temp_data)
    print("Merge Sort     : %s seconds" % (time.time() - start_time))

    temp_data = data.copy()
    start_time = time.time()
    radixSort(temp_data)

    print("Radix Sort     : %s seconds" % (time.time() - start_time))

"""### N = 10"""

displayExecutionTimes(10)

"""### N = 100"""

displayExecutionTimes(100)

"""### N = 1000"""

displayExecutionTimes(1000)

"""### N = 10000"""

displayExecutionTimes(10000)

"""N = 100000"""

displayExecutionTimes(100000)

def displayExecutionTimes(n):
    data = random.sample(range(1, n*10), n)
    temp_data = data.copy()

    temp_data = data.copy()
    start_time = time.time()
    mergeSort(temp_data)
    print("Merge Sort     : %s seconds" % (time.time() - start_time))

    temp_data = data.copy()
    start_time = time.time()
    radixSort(temp_data)

    print("Radix Sort     : %s seconds" % (time.time() - start_time))

"""### N = 1000000"""

displayExecutionTimesWithoutSelection(1000000)

"""### N =10000000"""

displayExecutionTimesWithoutSelection(10000000)

